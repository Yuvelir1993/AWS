---
- name: Package application locally
  hosts: localhost
  vars:
    build_folder: "../build"
    package_name: "projectHubApp.zip"
    app_frontend_path: "../../app"
    app_backend_path: "{{ app_frontend_path }}/backend"

  tasks:
    - name: Ensure build folder exists
      ansible.builtin.file:
        path: "{{ build_folder }}"
        state: directory

    - name: Build frontend
      ansible.builtin.command:
        cmd: npm run build
        chdir: "{{ app_frontend_path }}"
      ignore_errors: no

    - name: Build backend
      ansible.builtin.command:
        cmd: npm run build
        chdir: "{{ app_backend_path }}"
      ignore_errors: no

    - name: Remove old package
      ansible.builtin.file:
        path: "{{ build_folder }}/{{ package_name }}"
        state: absent

    - name: Create ZIP file for deployment
      ansible.builtin.archive:
        path:
          - "../../app/build"
          - "../../app/backend/dist"
          - "../../app/backend/package.json"
        dest: "{{ build_folder }}/{{ package_name }}"
        format: zip

- name: Deploy ZIP file and start application
  hosts: all
  become: yes
  vars:
    user: "ubuntu"
    build_folder: "../build"
    package_name: "projectHubApp.zip"
    project_base_path: "/var/www/projectHubApp"
    zip_file_path: "{{ build_folder }}/{{ package_name }}"
    app_target_path: "{{ project_base_path }}"
    backend_target_path: "{{ project_base_path }}/backend"

  tasks:
    - name: Ensure target directories for App exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0755"
      with_items:
        - "{{ app_target_path }}"
        - "{{ backend_target_path }}"

    - name: Copy ZIP file to target server
      ansible.builtin.copy:
        src: "{{ zip_file_path }}"
        dest: "/tmp/{{ package_name }}"
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Extract package ZIP file to App target directory
      ansible.builtin.unarchive:
        src: "/tmp/{{ package_name }}"
        dest: "{{ app_target_path }}"
        remote_src: yes

    - name: List extracted files and directories
      ansible.builtin.shell: |
        find "{{ app_target_path }}" -type f | wc -l
      register: file_count

    - name: Log file count
      ansible.builtin.debug:
        msg: "Number of files extracted in {{ app_target_path }}: {{ file_count.stdout }}"

    - name: Install production dependencies for backend
      ansible.builtin.command:
        cmd: npm install --production
        chdir: "{{ backend_target_path }}"
      environment:
        NODE_ENV: production

    - name: Start the application process
      ansible.builtin.shell: |
        nohup npm run start > /var/log/projectHubApp.log 2>&1 &
      args:
        chdir: "{{ backend_target_path }}"
